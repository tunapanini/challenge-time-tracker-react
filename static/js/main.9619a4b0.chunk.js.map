{"version":3,"sources":["components/NavigationBar/NavigationBar.module.scss","components/NavigationBar/NavigationBar.tsx","pages/Expenses.tsx","pages/Management.tsx","pages/Timesheets.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavLinkItem","hrefLink","label","active","onClick","className","style","linkItem","to","activeLine","NavigationBar","pathname","useState","isOpen","setIsOpen","toggleNavLinks","value","wrapper","toggler","links","open","right","alert","src","alt","profile","avatar","info","name","level","type","arrow","Expenses","Management","Timesheets","App","location","useLocation","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,QAAU,+BAA+B,QAAU,+BAA+B,MAAQ,6BAA6B,KAAO,4BAA4B,SAAW,gCAAgC,OAAS,8BAA8B,WAAa,kCAAkC,MAAQ,6BAA6B,QAAU,+BAA+B,OAAS,8BAA8B,KAAO,4BAA4B,MAAQ,6BAA6B,MAAQ,6BAA6B,MAAQ,+B,mOCoCvhB,SAASC,EAAT,GAEI,IADFC,EACC,EADDA,SAAUC,EACT,EADSA,MAAOC,EAChB,EADgBA,OAAQC,EACxB,EADwBA,QAEzB,OACE,0BAAMC,UAAWC,IAAMC,UACrB,kBAAC,IAAD,CAAMC,GAAIP,EAAUG,QAASA,GAAUF,GACtCC,GAAU,0BAAME,UAAWC,IAAMG,cAKzBC,MA3Cf,YAAsC,IAAbC,EAAY,EAAZA,SAAY,EACPC,oBAAS,GADF,mBAC5BC,EAD4B,KACpBC,EADoB,KAG7BC,EAAiB,WAAsB,IAArBC,EAAoB,wDAAXH,EAC/BC,EAAUE,IAGZ,OACE,yBAAKX,UAAWC,IAAMW,SACpB,yBAAKZ,UAAWC,IAAMY,SACpB,kBAAC,IAAD,CAAiBd,QAAS,kBAAMW,QAElC,yBAAKV,UAAS,UAAKC,IAAMa,MAAX,YAAoBN,EAASP,IAAMc,KAAO,KACtD,kBAACpB,EAAD,CAAaC,SAAS,cAAcC,MAAM,aAAaC,OAAqB,gBAAbQ,EAA4BP,QAAS,kBAAMW,GAAe,MACzH,kBAACf,EAAD,CAAaC,SAAS,YAAYC,MAAM,WAAWC,OAAqB,cAAbQ,EAA0BP,QAAS,kBAAMW,GAAe,MACnH,kBAACf,EAAD,CAAaC,SAAS,cAAcC,MAAM,aAAaC,OAAqB,gBAAbQ,EAA4BP,QAAS,kBAAMW,GAAe,OAE3H,yBAAKV,UAAWC,IAAMe,OACpB,yBAAKhB,UAAWC,IAAMgB,MAAOC,IAAI,GAAGC,IAAI,KACxC,yBAAKnB,UAAWC,IAAMmB,SACpB,yBAAKpB,UAAWC,IAAMoB,OAAQH,IAAI,GAAGC,IAAI,KACzC,yBAAKnB,UAAWC,IAAMqB,MACpB,uBAAGtB,UAAWC,IAAMsB,MAApB,kBACA,uBAAGvB,UAAWC,IAAMuB,OAApB,mBAEF,4BAAQC,KAAK,SAASzB,UAAWC,IAAMyB,OAAvC,oBCxBKC,MAJf,WACE,OAAO,0CCGMC,MAJf,WACE,OAAO,4CCGMC,MAJf,WACE,OAAO,4CC+BMC,MAxBf,WACE,IAAMC,EAAWC,cAEjB,OACE,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAeM,SAAUyB,EAASzB,YAEpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUA,KAAK,IAAI9B,GAAG,mBChBV+B,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAkD,iCAC/D,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9619a4b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"NavigationBar_wrapper__Bl_Sx\",\"toggler\":\"NavigationBar_toggler__1r-28\",\"links\":\"NavigationBar_links__2u1IY\",\"open\":\"NavigationBar_open__2Dpja\",\"linkItem\":\"NavigationBar_linkItem__1UvM7\",\"active\":\"NavigationBar_active__3grNC\",\"activeLine\":\"NavigationBar_activeLine__1136w\",\"right\":\"NavigationBar_right__21iJd\",\"profile\":\"NavigationBar_profile__9-Iyk\",\"avatar\":\"NavigationBar_avatar__3Ok25\",\"name\":\"NavigationBar_name__3y6E1\",\"level\":\"NavigationBar_level__35zqE\",\"arrow\":\"NavigationBar_arrow__1aZA6\",\"alert\":\"NavigationBar_alert__1F6py\"};","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuRoundedIcon from '@material-ui/icons/MenuRounded';\nimport style from './NavigationBar.module.scss';\n\nfunction NavigationBar({ pathname }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleNavLinks = (value = !isOpen) => {\n    setIsOpen(value);\n  };\n\n  return (\n    <nav className={style.wrapper}>\n      <div className={style.toggler}>\n        <MenuRoundedIcon onClick={() => toggleNavLinks()} />\n      </div>\n      <div className={`${style.links} ${isOpen ? style.open : ''}`}>\n        <NavLinkItem hrefLink=\"/timesheets\" label=\"Timesheets\" active={pathname === '/timesheets'} onClick={() => toggleNavLinks(false)} />\n        <NavLinkItem hrefLink=\"/expenses\" label=\"Expenses\" active={pathname === '/expenses'} onClick={() => toggleNavLinks(false)} />\n        <NavLinkItem hrefLink=\"/management\" label=\"Management\" active={pathname === '/management'} onClick={() => toggleNavLinks(false)} />\n      </div>\n      <div className={style.right}>\n        <img className={style.alert} src=\"\" alt=\"\" />\n        <div className={style.profile}>\n          <img className={style.avatar} src=\"\" alt=\"\" />\n          <div className={style.info}>\n            <p className={style.name}>Adam Fisherman</p>\n            <p className={style.level}> Administrator</p>\n          </div>\n          <button type=\"button\" className={style.arrow}>Open Profile</button>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nfunction NavLinkItem({\n  hrefLink, label, active, onClick,\n}) {\n  return (\n    <span className={style.linkItem}>\n      <Link to={hrefLink} onClick={onClick}>{label}</Link>\n      {active && <span className={style.activeLine} />}\n    </span>\n  );\n}\n\nexport default NavigationBar;\n","import React from 'react';\n\nfunction Expenses() {\n  return <div>Expenses</div>;\n}\n\nexport default Expenses;\n","import React from 'react';\n\nfunction Management() {\n  return <div>Management</div>;\n}\n\nexport default Management;\n","import React from 'react';\n\nfunction Timesheets() {\n  return <div>Timesheets</div>;\n}\n\nexport default Timesheets;\n","import React from 'react';\nimport './App.scss';\nimport {\n  useLocation, Route, Switch, Redirect,\n} from 'react-router-dom';\nimport NavigationBar from './components/NavigationBar/NavigationBar';\nimport Expenses from './pages/Expenses';\nimport Management from './pages/Management';\nimport Timesheets from './pages/Timesheets';\n\nfunction App() {\n  const location = useLocation();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavigationBar pathname={location.pathname} />\n      </header>\n      <Switch>\n        <Route path=\"/timesheets\">\n          <Timesheets />\n        </Route>\n        <Route path=\"/expenses\">\n          <Expenses />\n        </Route>\n        <Route path=\"/management\">\n          <Management />\n        </Route>\n        <Redirect path=\"*\" to=\"/timesheets\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.NODE_ENV === 'production' ? '/challenge-time-tracker-react' : ''}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}